using System;
using System.Collections.Generic;
using System.Text;

namespace C4G.Editor
{
    internal sealed class CodeWriter
    {
        internal const string GENERATED_CODE_DISCLAIMER =
@"// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//    THIS CODE IS GENERATED BY C4G CodeWriter
//    DO NOT EDIT
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";

        private readonly string _indentString;
        private readonly StringBuilder _builder;
        private readonly HashSet<string> _usings;

        private int _indentLevel;

        internal CodeWriter(string indentString)
        {
            _indentString = indentString;
            _builder = new StringBuilder();
            _usings = new HashSet<string>();
        }

        internal CodeWriter AddUsing(string directive)
        {
            if (!string.IsNullOrWhiteSpace(directive))
                _usings.Add(directive);
            return this;
        }

        internal void WritePublicClass(string name, bool isPartial, string baseClass, Action<CodeWriter> content)
        {
            string partialText = isPartial ? "partial " : string.Empty;
            string baseText = string.IsNullOrWhiteSpace(baseClass) ? string.Empty : $" : {baseClass}";
            WriteBlock($"public {partialText}class {name}{baseText}", content);
        }

        internal void WritePublicProperty(string name, string type, string defaultValue = "")
        {
            string defaultValueText = string.IsNullOrWhiteSpace(defaultValue) ? string.Empty : $" = {defaultValue};";
            WriteLine($"public {type} {name} {{ get; set; }}{defaultValueText}");
        }

        internal string Build()
        {
            var result = new StringBuilder();

            result.AppendLine(GENERATED_CODE_DISCLAIMER);
            result.AppendLine();

            foreach (var directive in _usings)
                result.AppendLine($"using {directive};");

            if (_usings.Count > 0)
                result.AppendLine();

            result.Append(_builder);

            return result.ToString();
        }

        internal void Clear()
        {
            _builder.Clear();
            _usings.Clear();
        }

        private void WriteLine(string line)
        {
            for(int i = 0; i < _indentLevel; i++)
                _builder.Append(_indentString);
            _builder.AppendLine(line);
        }

        private void WriteEmptyLine()
        {
            _builder.AppendLine();
        }

        private void WriteBlock(string header, Action<CodeWriter> blockContent)
        {
            WriteLine(header);
            WriteLine("{");
            _indentLevel++;
            blockContent?.Invoke(this);
            _indentLevel--;
            WriteLine("}");
        }
    }
}